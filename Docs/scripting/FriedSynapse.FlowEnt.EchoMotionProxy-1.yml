### YamlMime:ManagedReference
items:
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
  commentId: T:FriedSynapse.FlowEnt.EchoMotionProxy`1
  id: EchoMotionProxy`1
  parent: FriedSynapse.FlowEnt
  children:
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.#ctor(FriedSynapse.FlowEnt.Echo,`0)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply(FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[])
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply(System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.AsAsync
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Echo
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.ForAll``1(System.Collections.Generic.IEnumerable{``0})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.For``1(``0)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.For``1(``0[])
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Item
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleted(System.Action)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleting(System.Action)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopCompleted(System.Action{System.Nullable{System.Int32}})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopStarted(System.Action{System.Nullable{System.Int32}})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarted(System.Action)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarting(System.Action)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdated(System.Action{System.Single})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdating(System.Action{System.Single})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Pause
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Reset
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Resume
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetAutoStart(System.Boolean)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelay(System.Single)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelayUntil(System.Func{System.Boolean})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetLoopCount(System.Nullable{System.Int32})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetName(System.String)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetSkipFrames(System.Int32)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetStopCondition(System.Func{System.Single,System.Boolean})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeScale(System.Single)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeout(System.Nullable{System.Single})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.SetUpdateType(FriedSynapse.FlowEnt.UpdateType)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Start
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.StartAsync(System.Nullable{System.Threading.CancellationToken})
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.Stop(System.Boolean)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.op_Implicit(FriedSynapse.FlowEnt.EchoMotionProxy{`0})~FriedSynapse.FlowEnt.Echo
  langs:
  - csharp
  - vb
  name: EchoMotionProxy<TItem>
  nameWithType: EchoMotionProxy<TItem>
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>
  type: Class
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: EchoMotionProxy
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 13
  namespace: FriedSynapse.FlowEnt
  summary: Wrapper class that is used to apply motions to an object of any type using a echo
  example: []
  syntax:
    content: public class EchoMotionProxy<TItem>
    typeParameters:
    - id: TItem
      description: ''
    content.vb: Public Class EchoMotionProxy(Of TItem)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Echo``1(FriedSynapse.FlowEnt.EchoOptions)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Echo``1(System.Nullable{System.Single},System.Boolean)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Tween``1(FriedSynapse.FlowEnt.TweenOptions)
  - FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Tween``1(System.Single,System.Boolean)
  nameWithType.vb: EchoMotionProxy(Of TItem)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem)
  name.vb: EchoMotionProxy(Of TItem)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.#ctor(FriedSynapse.FlowEnt.Echo,`0)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.#ctor(FriedSynapse.FlowEnt.Echo,`0)
  id: '#ctor(FriedSynapse.FlowEnt.Echo,`0)'
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: EchoMotionProxy(Echo, TItem)
  nameWithType: EchoMotionProxy<TItem>.EchoMotionProxy(Echo, TItem)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.EchoMotionProxy(FriedSynapse.FlowEnt.Echo, TItem)
  type: Constructor
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: .ctor
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 18
  namespace: FriedSynapse.FlowEnt
  syntax:
    content: public EchoMotionProxy(Echo echo, TItem item)
    parameters:
    - id: echo
      type: FriedSynapse.FlowEnt.Echo
    - id: item
      type: '{TItem}'
    content.vb: Public Sub New(echo As Echo, item As TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.#ctor*
  nameWithType.vb: EchoMotionProxy(Of TItem).New(Echo, TItem)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).New(FriedSynapse.FlowEnt.Echo, TItem)
  name.vb: New(Echo, TItem)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Echo
  commentId: P:FriedSynapse.FlowEnt.EchoMotionProxy`1.Echo
  id: Echo
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Echo
  nameWithType: EchoMotionProxy<TItem>.Echo
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Echo
  type: Property
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Echo
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 24
  namespace: FriedSynapse.FlowEnt
  syntax:
    content: public Echo Echo { get; }
    parameters: []
    return:
      type: FriedSynapse.FlowEnt.Echo
    content.vb: Public ReadOnly Property Echo As Echo
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Echo*
  nameWithType.vb: EchoMotionProxy(Of TItem).Echo
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Echo
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Item
  commentId: P:FriedSynapse.FlowEnt.EchoMotionProxy`1.Item
  id: Item
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Item
  nameWithType: EchoMotionProxy<TItem>.Item
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Item
  type: Property
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Item
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 25
  namespace: FriedSynapse.FlowEnt
  syntax:
    content: public TItem Item { get; }
    parameters: []
    return:
      type: '{TItem}'
    content.vb: Public ReadOnly Property Item As TItem
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Item*
  nameWithType.vb: EchoMotionProxy(Of TItem).Item
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Item
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.op_Implicit(FriedSynapse.FlowEnt.EchoMotionProxy{`0})~FriedSynapse.FlowEnt.Echo
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.op_Implicit(FriedSynapse.FlowEnt.EchoMotionProxy{`0})~FriedSynapse.FlowEnt.Echo
  id: op_Implicit(FriedSynapse.FlowEnt.EchoMotionProxy{`0})~FriedSynapse.FlowEnt.Echo
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: implicit operator Echo(EchoMotionProxy<TItem>)
  nameWithType: EchoMotionProxy<TItem>.implicit operator Echo(EchoMotionProxy<TItem>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.implicit operator FriedSynapse.FlowEnt.Echo(FriedSynapse.FlowEnt.EchoMotionProxy<TItem>)
  type: Operator
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: op_Implicit
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 27
  namespace: FriedSynapse.FlowEnt
  syntax:
    content: public static implicit operator Echo(EchoMotionProxy<TItem> proxy)
    parameters:
    - id: proxy
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    return:
      type: FriedSynapse.FlowEnt.Echo
    content.vb: Public Shared Widening Operator CType(proxy As EchoMotionProxy(Of TItem)) As Echo
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.op_Implicit*
  nameWithType.vb: EchoMotionProxy(Of TItem).CType(EchoMotionProxy(Of TItem))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).CType(FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem))
  name.vb: CType(EchoMotionProxy(Of TItem))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply(FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[])
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply(FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[])
  id: Apply(FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[])
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Apply(params AbstractEchoMotion[])
  nameWithType: EchoMotionProxy<TItem>.Apply(params AbstractEchoMotion[])
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Apply(params FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[])
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Apply
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 33
  namespace: FriedSynapse.FlowEnt
  summary: Applies all the motions to the current echo.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Apply(params AbstractEchoMotion[] motions)
    parameters:
    - id: motions
      type: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[]
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function Apply(ParamArray motions As AbstractEchoMotion()) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply*
  nameWithType.vb: EchoMotionProxy(Of TItem).Apply(ParamArray AbstractEchoMotion())
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Apply(ParamArray FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion())
  name.vb: Apply(ParamArray AbstractEchoMotion())
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply(System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply(System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion})
  id: Apply(System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Apply(IEnumerable<AbstractEchoMotion>)
  nameWithType: EchoMotionProxy<TItem>.Apply(IEnumerable<AbstractEchoMotion>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Apply(System.Collections.Generic.IEnumerable<FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Apply
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 41
  namespace: FriedSynapse.FlowEnt
  summary: Applies all the motions to the current echo.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Apply(IEnumerable<AbstractEchoMotion> motions)
    parameters:
    - id: motions
      type: System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion}
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function Apply(motions As IEnumerable(Of AbstractEchoMotion)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply*
  nameWithType.vb: EchoMotionProxy(Of TItem).Apply(IEnumerable(Of AbstractEchoMotion))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Apply(System.Collections.Generic.IEnumerable(Of FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion))
  name.vb: Apply(IEnumerable(Of AbstractEchoMotion))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.For``1(``0)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.For``1(``0)
  id: For``1(``0)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: For<TItem2>(TItem2)
  nameWithType: EchoMotionProxy<TItem>.For<TItem2>(TItem2)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.For<TItem2>(TItem2)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: For
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 49
  namespace: FriedSynapse.FlowEnt
  summary: Creates a scope for the object so you can add motions designed specifically for that object.
  example: []
  syntax:
    content: 'public EchoMotionProxy<TItem2> For<TItem2>(TItem2 item) where TItem2 : class'
    parameters:
    - id: item
      type: '{TItem2}'
    typeParameters:
    - id: TItem2
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy{{TItem2}}
    content.vb: Public Function [For](Of TItem2 As Class)(item As TItem2) As EchoMotionProxy(Of TItem2)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.For*
  nameWithType.vb: EchoMotionProxy(Of TItem).For(Of TItem2)(TItem2)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).For(Of TItem2)(TItem2)
  name.vb: For(Of TItem2)(TItem2)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.For``1(``0[])
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.For``1(``0[])
  id: For``1(``0[])
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: For<TItem2>(params TItem2[])
  nameWithType: EchoMotionProxy<TItem>.For<TItem2>(params TItem2[])
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.For<TItem2>(params TItem2[])
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: For
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 55
  namespace: FriedSynapse.FlowEnt
  summary: Creates a scope for the object so you can add motions designed specifically for that array of objects.
  example: []
  syntax:
    content: 'public EchoMotionProxyArray<TItem2> For<TItem2>(params TItem2[] elements) where TItem2 : class'
    parameters:
    - id: elements
      type: '{TItem2}[]'
      description: ''
    typeParameters:
    - id: TItem2
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxyArray{{TItem2}}
    content.vb: Public Function [For](Of TItem2 As Class)(ParamArray elements As TItem2()) As EchoMotionProxyArray(Of TItem2)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.For*
  nameWithType.vb: EchoMotionProxy(Of TItem).For(Of TItem2)(ParamArray TItem2())
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).For(Of TItem2)(ParamArray TItem2())
  name.vb: For(Of TItem2)(ParamArray TItem2())
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.ForAll``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.ForAll``1(System.Collections.Generic.IEnumerable{``0})
  id: ForAll``1(System.Collections.Generic.IEnumerable{``0})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: ForAll<TItem2>(IEnumerable<TItem2>)
  nameWithType: EchoMotionProxy<TItem>.ForAll<TItem2>(IEnumerable<TItem2>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.ForAll<TItem2>(System.Collections.Generic.IEnumerable<TItem2>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: ForAll
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 63
  namespace: FriedSynapse.FlowEnt
  summary: Creates a scope for the object so you can add motions designed specifically for that enumeration of objects.
  example: []
  syntax:
    content: 'public EchoMotionProxyArray<TItem2> ForAll<TItem2>(IEnumerable<TItem2> elements) where TItem2 : class'
    parameters:
    - id: elements
      type: System.Collections.Generic.IEnumerable{{TItem2}}
      description: ''
    typeParameters:
    - id: TItem2
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxyArray{{TItem2}}
    content.vb: Public Function ForAll(Of TItem2 As Class)(elements As IEnumerable(Of TItem2)) As EchoMotionProxyArray(Of TItem2)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.ForAll*
  nameWithType.vb: EchoMotionProxy(Of TItem).ForAll(Of TItem2)(IEnumerable(Of TItem2))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).ForAll(Of TItem2)(System.Collections.Generic.IEnumerable(Of TItem2))
  name.vb: ForAll(Of TItem2)(IEnumerable(Of TItem2))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Start
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Start
  id: Start
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: EchoMotionProxy<TItem>.Start()
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Start()
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Start
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 75
  namespace: FriedSynapse.FlowEnt
  summary: Starts the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Start()
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function Start() As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Start*
  exceptions:
  - type: FriedSynapse.FlowEnt.AnimationException
    commentId: T:FriedSynapse.FlowEnt.AnimationException
    description: If the echo has already started.
  nameWithType.vb: EchoMotionProxy(Of TItem).Start()
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Start()
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.StartAsync(System.Nullable{System.Threading.CancellationToken})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.StartAsync(System.Nullable{System.Threading.CancellationToken})
  id: StartAsync(System.Nullable{System.Threading.CancellationToken})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: StartAsync(CancellationToken?)
  nameWithType: EchoMotionProxy<TItem>.StartAsync(CancellationToken?)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.StartAsync(System.Threading.CancellationToken?)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: StartAsync
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 83
  namespace: FriedSynapse.FlowEnt
  summary: Starts the animation async(you can await this till the animation finishes).
  example: []
  syntax:
    content: public Task<EchoMotionProxy<TItem>> StartAsync(CancellationToken? token = null)
    parameters:
    - id: token
      type: System.Nullable{System.Threading.CancellationToken}
      description: The cancellation doesn't cancel the task, but rather terminates the animation. The task will be completed
    return:
      type: System.Threading.Tasks.Task{FriedSynapse.FlowEnt.EchoMotionProxy`1}
    content.vb: Public Function StartAsync(token As CancellationToken? = Nothing) As Task(Of EchoMotionProxy(Of TItem))
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.StartAsync*
  exceptions:
  - type: FriedSynapse.FlowEnt.AnimationException
    commentId: T:FriedSynapse.FlowEnt.AnimationException
    description: If the echo has already started.
  nameWithType.vb: EchoMotionProxy(Of TItem).StartAsync(CancellationToken?)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).StartAsync(System.Threading.CancellationToken?)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Resume
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Resume
  id: Resume
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Resume()
  nameWithType: EchoMotionProxy<TItem>.Resume()
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Resume()
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Resume
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 91
  namespace: FriedSynapse.FlowEnt
  summary: Resumes the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Resume()
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function [Resume]() As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Resume*
  nameWithType.vb: EchoMotionProxy(Of TItem).Resume()
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Resume()
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Pause
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Pause
  id: Pause
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Pause()
  nameWithType: EchoMotionProxy<TItem>.Pause()
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Pause()
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Pause
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 99
  namespace: FriedSynapse.FlowEnt
  summary: Pauses the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Pause()
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function Pause() As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Pause*
  nameWithType.vb: EchoMotionProxy(Of TItem).Pause()
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Pause()
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Stop(System.Boolean)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Stop(System.Boolean)
  id: Stop(System.Boolean)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Stop(bool)
  nameWithType: EchoMotionProxy<TItem>.Stop(bool)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Stop(bool)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Stop
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 107
  namespace: FriedSynapse.FlowEnt
  summary: Stops the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Stop(bool triggerOnCompleted = false)
    parameters:
    - id: triggerOnCompleted
      type: System.Boolean
      description: If set to true will trigger the "OnCompleted" event on the animation
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function [Stop](triggerOnCompleted As Boolean = False) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Stop*
  nameWithType.vb: EchoMotionProxy(Of TItem).Stop(Boolean)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Stop(Boolean)
  name.vb: Stop(Boolean)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Reset
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.Reset
  id: Reset
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: EchoMotionProxy<TItem>.Reset()
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Reset()
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: Reset
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 115
  namespace: FriedSynapse.FlowEnt
  summary: Resets the animation so in can be replayed.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> Reset()
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function Reset() As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.Reset*
  exceptions:
  - type: FriedSynapse.FlowEnt.AnimationException
    commentId: T:FriedSynapse.FlowEnt.AnimationException
    description: If the animation is not finished.
  - type: FriedSynapse.FlowEnt.AnimationException
    commentId: T:FriedSynapse.FlowEnt.AnimationException
    description: If the echo is not finished.
  nameWithType.vb: EchoMotionProxy(Of TItem).Reset()
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Reset()
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.AsAsync
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.AsAsync
  id: AsAsync
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: AsAsync()
  nameWithType: EchoMotionProxy<TItem>.AsAsync()
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.AsAsync()
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: AsAsync
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 123
  namespace: FriedSynapse.FlowEnt
  summary: Provides a task that can be awaited. The task completes when the animation ends.
  example: []
  syntax:
    content: public Task AsAsync()
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function AsAsync() As Task
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.AsAsync*
  nameWithType.vb: EchoMotionProxy(Of TItem).AsAsync()
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).AsAsync()
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarting(System.Action)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarting(System.Action)
  id: OnStarting(System.Action)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnStarting(Action)
  nameWithType: EchoMotionProxy<TItem>.OnStarting(Action)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnStarting(System.Action)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnStarting
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 134
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation is starting.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnStarting(Action callback)
    parameters:
    - id: callback
      type: System.Action
      description: The event.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnStarting(callback As Action) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarting*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnStarting(Action)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnStarting(System.Action)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarted(System.Action)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarted(System.Action)
  id: OnStarted(System.Action)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnStarted(Action)
  nameWithType: EchoMotionProxy<TItem>.OnStarted(Action)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnStarted(System.Action)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnStarted
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 142
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation has started.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnStarted(Action callback)
    parameters:
    - id: callback
      type: System.Action
      description: The event.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnStarted(callback As Action) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarted*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnStarted(Action)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnStarted(System.Action)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdating(System.Action{System.Single})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdating(System.Action{System.Single})
  id: OnUpdating(System.Action{System.Single})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnUpdating(Action<float>)
  nameWithType: EchoMotionProxy<TItem>.OnUpdating(Action<float>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnUpdating(System.Action<float>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnUpdating
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 150
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation is updating.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnUpdating(Action<float> callback)
    parameters:
    - id: callback
      type: System.Action{System.Single}
      description: The event.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnUpdating(callback As Action(Of Single)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdating*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnUpdating(Action(Of Single))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnUpdating(System.Action(Of Single))
  name.vb: OnUpdating(Action(Of Single))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdated(System.Action{System.Single})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdated(System.Action{System.Single})
  id: OnUpdated(System.Action{System.Single})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnUpdated(Action<float>)
  nameWithType: EchoMotionProxy<TItem>.OnUpdated(Action<float>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnUpdated(System.Action<float>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnUpdated
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 158
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation has updated.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnUpdated(Action<float> callback)
    parameters:
    - id: callback
      type: System.Action{System.Single}
      description: The event.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnUpdated(callback As Action(Of Single)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdated*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnUpdated(Action(Of Single))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnUpdated(System.Action(Of Single))
  name.vb: OnUpdated(Action(Of Single))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopStarted(System.Action{System.Nullable{System.Int32}})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopStarted(System.Action{System.Nullable{System.Int32}})
  id: OnLoopStarted(System.Action{System.Nullable{System.Int32}})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnLoopStarted(Action<int?>)
  nameWithType: EchoMotionProxy<TItem>.OnLoopStarted(Action<int?>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnLoopStarted(System.Action<int?>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnLoopStarted
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 166
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation loop has started.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnLoopStarted(Action<int?> callback)
    parameters:
    - id: callback
      type: System.Action{System.Nullable{System.Int32}}
      description: The event. The parameter represents the number of loops left. If there are infinite loops it'll send a null param.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnLoopStarted(callback As Action(Of Integer?)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopStarted*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnLoopStarted(Action(Of Integer?))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnLoopStarted(System.Action(Of Integer?))
  name.vb: OnLoopStarted(Action(Of Integer?))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopCompleted(System.Action{System.Nullable{System.Int32}})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopCompleted(System.Action{System.Nullable{System.Int32}})
  id: OnLoopCompleted(System.Action{System.Nullable{System.Int32}})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnLoopCompleted(Action<int?>)
  nameWithType: EchoMotionProxy<TItem>.OnLoopCompleted(Action<int?>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnLoopCompleted(System.Action<int?>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnLoopCompleted
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 174
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation loop has completed.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnLoopCompleted(Action<int?> callback)
    parameters:
    - id: callback
      type: System.Action{System.Nullable{System.Int32}}
      description: The event. The parameter represents the number of loops left. If there are infinite loops it'll send a null param.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnLoopCompleted(callback As Action(Of Integer?)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopCompleted*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnLoopCompleted(Action(Of Integer?))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnLoopCompleted(System.Action(Of Integer?))
  name.vb: OnLoopCompleted(Action(Of Integer?))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleting(System.Action)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleting(System.Action)
  id: OnCompleting(System.Action)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnCompleting(Action)
  nameWithType: EchoMotionProxy<TItem>.OnCompleting(Action)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnCompleting(System.Action)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnCompleting
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 182
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation is completing.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnCompleting(Action callback)
    parameters:
    - id: callback
      type: System.Action
      description: The event.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnCompleting(callback As Action) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleting*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnCompleting(Action)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnCompleting(System.Action)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleted(System.Action)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleted(System.Action)
  id: OnCompleted(System.Action)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: OnCompleted(Action)
  nameWithType: EchoMotionProxy<TItem>.OnCompleted(Action)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnCompleted(System.Action)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: OnCompleted
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 190
  namespace: FriedSynapse.FlowEnt
  summary: Adds an event called when the animation has completed.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> OnCompleted(Action callback)
    parameters:
    - id: callback
      type: System.Action
      description: The event.
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function OnCompleted(callback As Action) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleted*
  nameWithType.vb: EchoMotionProxy(Of TItem).OnCompleted(Action)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnCompleted(System.Action)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetName(System.String)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetName(System.String)
  id: SetName(System.String)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetName(string)
  nameWithType: EchoMotionProxy<TItem>.SetName(string)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetName(string)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetName
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 202
  namespace: FriedSynapse.FlowEnt
  summary: Sets the name of the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetName(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetName(name As String) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetName*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetName(String)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetName(String)
  name.vb: SetName(String)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetUpdateType(FriedSynapse.FlowEnt.UpdateType)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetUpdateType(FriedSynapse.FlowEnt.UpdateType)
  id: SetUpdateType(FriedSynapse.FlowEnt.UpdateType)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetUpdateType(UpdateType)
  nameWithType: EchoMotionProxy<TItem>.SetUpdateType(UpdateType)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetUpdateType(FriedSynapse.FlowEnt.UpdateType)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetUpdateType
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 210
  namespace: FriedSynapse.FlowEnt
  summary: Sets the update type for the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetUpdateType(UpdateType updateType)
    parameters:
    - id: updateType
      type: FriedSynapse.FlowEnt.UpdateType
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetUpdateType(updateType As UpdateType) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetUpdateType*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetUpdateType(UpdateType)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetUpdateType(FriedSynapse.FlowEnt.UpdateType)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetAutoStart(System.Boolean)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetAutoStart(System.Boolean)
  id: SetAutoStart(System.Boolean)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetAutoStart(bool)
  nameWithType: EchoMotionProxy<TItem>.SetAutoStart(bool)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetAutoStart(bool)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetAutoStart
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 218
  namespace: FriedSynapse.FlowEnt
  summary: Sets whether this animation should auto-start or not.
  remarks: Auto-start will be slower than a true-start. See more at https://flowent.friedsynapse.com/tips#h.s5cucrg5qyjc
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetAutoStart(bool autoStart)
    parameters:
    - id: autoStart
      type: System.Boolean
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetAutoStart(autoStart As Boolean) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetAutoStart*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetAutoStart(Boolean)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetAutoStart(Boolean)
  name.vb: SetAutoStart(Boolean)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetSkipFrames(System.Int32)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetSkipFrames(System.Int32)
  id: SetSkipFrames(System.Int32)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetSkipFrames(int)
  nameWithType: EchoMotionProxy<TItem>.SetSkipFrames(int)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetSkipFrames(int)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetSkipFrames
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 226
  namespace: FriedSynapse.FlowEnt
  summary: Sets the amount of frames you want to skip at when this animation is started.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetSkipFrames(int frames)
    parameters:
    - id: frames
      type: System.Int32
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetSkipFrames(frames As Integer) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetSkipFrames*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetSkipFrames(Integer)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetSkipFrames(Integer)
  name.vb: SetSkipFrames(Integer)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelay(System.Single)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelay(System.Single)
  id: SetDelay(System.Single)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetDelay(float)
  nameWithType: EchoMotionProxy<TItem>.SetDelay(float)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetDelay(float)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetDelay
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 234
  namespace: FriedSynapse.FlowEnt
  summary: Sets the amount of time in seconds that you want to delay when this animation is started.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetDelay(float time)
    parameters:
    - id: time
      type: System.Single
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetDelay(time As Single) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelay*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetDelay(Single)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetDelay(Single)
  name.vb: SetDelay(Single)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelayUntil(System.Func{System.Boolean})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelayUntil(System.Func{System.Boolean})
  id: SetDelayUntil(System.Func{System.Boolean})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetDelayUntil(Func<bool>)
  nameWithType: EchoMotionProxy<TItem>.SetDelayUntil(Func<bool>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetDelayUntil(System.Func<bool>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetDelayUntil
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 242
  namespace: FriedSynapse.FlowEnt
  summary: Sets the callback that holds the starting of the animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetDelayUntil(Func<bool> callback)
    parameters:
    - id: callback
      type: System.Func{System.Boolean}
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetDelayUntil(callback As Func(Of Boolean)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelayUntil*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetDelayUntil(Func(Of Boolean))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetDelayUntil(System.Func(Of Boolean))
  name.vb: SetDelayUntil(Func(Of Boolean))
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetLoopCount(System.Nullable{System.Int32})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetLoopCount(System.Nullable{System.Int32})
  id: SetLoopCount(System.Nullable{System.Int32})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetLoopCount(int?)
  nameWithType: EchoMotionProxy<TItem>.SetLoopCount(int?)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetLoopCount(int?)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetLoopCount
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 250
  namespace: FriedSynapse.FlowEnt
  summary: Sets the amount of loops you want this animation to have. If you want infinite loops pass a null value.
  remarks: Flows only have reset loop types.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetLoopCount(int? loopCount)
    parameters:
    - id: loopCount
      type: System.Nullable{System.Int32}
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetLoopCount(loopCount As Integer?) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetLoopCount*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetLoopCount(Integer?)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetLoopCount(Integer?)
  name.vb: SetLoopCount(Integer?)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeScale(System.Single)
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeScale(System.Single)
  id: SetTimeScale(System.Single)
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetTimeScale(float)
  nameWithType: EchoMotionProxy<TItem>.SetTimeScale(float)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetTimeScale(float)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetTimeScale
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 258
  namespace: FriedSynapse.FlowEnt
  summary: Sets the time scale for the current animation.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetTimeScale(float timeScale)
    parameters:
    - id: timeScale
      type: System.Single
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetTimeScale(timeScale As Single) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeScale*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetTimeScale(Single)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetTimeScale(Single)
  name.vb: SetTimeScale(Single)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeout(System.Nullable{System.Single})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeout(System.Nullable{System.Single})
  id: SetTimeout(System.Nullable{System.Single})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetTimeout(float?)
  nameWithType: EchoMotionProxy<TItem>.SetTimeout(float?)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetTimeout(float?)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetTimeout
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 266
  namespace: FriedSynapse.FlowEnt
  summary: Sets the amount of time in seconds that this echo will last.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetTimeout(float? timeout)
    parameters:
    - id: timeout
      type: System.Nullable{System.Single}
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetTimeout(timeout As Single?) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeout*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetTimeout(Single?)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetTimeout(Single?)
  name.vb: SetTimeout(Single?)
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetStopCondition(System.Func{System.Single,System.Boolean})
  commentId: M:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetStopCondition(System.Func{System.Single,System.Boolean})
  id: SetStopCondition(System.Func{System.Single,System.Boolean})
  parent: FriedSynapse.FlowEnt.EchoMotionProxy`1
  langs:
  - csharp
  - vb
  name: SetStopCondition(Func<float, bool>)
  nameWithType: EchoMotionProxy<TItem>.SetStopCondition(Func<float, bool>)
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetStopCondition(System.Func<float, bool>)
  type: Method
  source:
    remote:
      path: Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
      branch: docs/191-add_manual
      repo: https://github.com/Fried-Synapse/FlowEnt
    id: SetStopCondition
    path: ../Assets/FlowEnt/Scripts/Runtime/Core/Echo/EchoMotionProxy.cs
    startLine: 274
  namespace: FriedSynapse.FlowEnt
  summary: Sets the condition that when true, it will stop the echo.
  example: []
  syntax:
    content: public EchoMotionProxy<TItem> SetStopCondition(Func<float, bool> stopCondition)
    parameters:
    - id: stopCondition
      type: System.Func{System.Single,System.Boolean}
      description: ''
    return:
      type: FriedSynapse.FlowEnt.EchoMotionProxy`1
    content.vb: Public Function SetStopCondition(stopCondition As Func(Of Single, Boolean)) As EchoMotionProxy(Of TItem)
  overload: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetStopCondition*
  nameWithType.vb: EchoMotionProxy(Of TItem).SetStopCondition(Func(Of Single, Boolean))
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetStopCondition(System.Func(Of Single, Boolean))
  name.vb: SetStopCondition(Func(Of Single, Boolean))
references:
- uid: FriedSynapse.FlowEnt
  commentId: N:FriedSynapse.FlowEnt
  href: FriedSynapse.html
  name: FriedSynapse.FlowEnt
  nameWithType: FriedSynapse.FlowEnt
  fullName: FriedSynapse.FlowEnt
  spec.csharp:
  - uid: FriedSynapse
    name: FriedSynapse
    href: FriedSynapse.html
  - name: .
  - uid: FriedSynapse.FlowEnt
    name: FlowEnt
    href: FriedSynapse.FlowEnt.html
  spec.vb:
  - uid: FriedSynapse
    name: FriedSynapse
    href: FriedSynapse.html
  - name: .
  - uid: FriedSynapse.FlowEnt
    name: FlowEnt
    href: FriedSynapse.FlowEnt.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Echo``1(FriedSynapse.FlowEnt.EchoOptions)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,FriedSynapse.FlowEnt.EchoOptions)
  parent: FriedSynapse.FlowEnt.CommonExtensions
  definition: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,FriedSynapse.FlowEnt.EchoOptions)
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_FriedSynapse_FlowEnt_EchoOptions_
  name: Echo<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, EchoOptions)
  nameWithType: CommonExtensions.Echo<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, EchoOptions)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Echo<FriedSynapse.FlowEnt.EchoMotionProxy<TItem>>(FriedSynapse.FlowEnt.EchoMotionProxy<TItem>, FriedSynapse.FlowEnt.EchoOptions)
  nameWithType.vb: CommonExtensions.Echo(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), EchoOptions)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Echo(Of FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem))(FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem), FriedSynapse.FlowEnt.EchoOptions)
  name.vb: Echo(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), EchoOptions)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},FriedSynapse.FlowEnt.EchoOptions)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_FriedSynapse_FlowEnt_EchoOptions_
  - name: <
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: '>'
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoOptions
    name: EchoOptions
    href: FriedSynapse.FlowEnt.EchoOptions.html
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},FriedSynapse.FlowEnt.EchoOptions)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_FriedSynapse_FlowEnt_EchoOptions_
  - name: (
  - name: Of
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoOptions
    name: EchoOptions
    href: FriedSynapse.FlowEnt.EchoOptions.html
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Echo``1(System.Nullable{System.Single},System.Boolean)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,System.Nullable{System.Single},System.Boolean)
  parent: FriedSynapse.FlowEnt.CommonExtensions
  definition: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,System.Nullable{System.Single},System.Boolean)
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_System_Nullable_System_Single__System_Boolean_
  name: Echo<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, float?, bool)
  nameWithType: CommonExtensions.Echo<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, float?, bool)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Echo<FriedSynapse.FlowEnt.EchoMotionProxy<TItem>>(FriedSynapse.FlowEnt.EchoMotionProxy<TItem>, float?, bool)
  nameWithType.vb: CommonExtensions.Echo(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), Single?, Boolean)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Echo(Of FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem))(FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem), Single?, Boolean)
  name.vb: Echo(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), Single?, Boolean)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},System.Nullable{System.Single},System.Boolean)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_System_Nullable_System_Single__System_Boolean_
  - name: <
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: '>'
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},System.Nullable{System.Single},System.Boolean)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_System_Nullable_System_Single__System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Tween``1(FriedSynapse.FlowEnt.TweenOptions)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,FriedSynapse.FlowEnt.TweenOptions)
  parent: FriedSynapse.FlowEnt.CommonExtensions
  definition: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,FriedSynapse.FlowEnt.TweenOptions)
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_FriedSynapse_FlowEnt_TweenOptions_
  name: Tween<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, TweenOptions)
  nameWithType: CommonExtensions.Tween<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, TweenOptions)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Tween<FriedSynapse.FlowEnt.EchoMotionProxy<TItem>>(FriedSynapse.FlowEnt.EchoMotionProxy<TItem>, FriedSynapse.FlowEnt.TweenOptions)
  nameWithType.vb: CommonExtensions.Tween(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), TweenOptions)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Tween(Of FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem))(FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem), FriedSynapse.FlowEnt.TweenOptions)
  name.vb: Tween(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), TweenOptions)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},FriedSynapse.FlowEnt.TweenOptions)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_FriedSynapse_FlowEnt_TweenOptions_
  - name: <
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: '>'
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.TweenOptions
    name: TweenOptions
    href: FriedSynapse.FlowEnt.TweenOptions.html
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},FriedSynapse.FlowEnt.TweenOptions)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_FriedSynapse_FlowEnt_TweenOptions_
  - name: (
  - name: Of
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.TweenOptions
    name: TweenOptions
    href: FriedSynapse.FlowEnt.TweenOptions.html
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.FriedSynapse.FlowEnt.CommonExtensions.Tween``1(System.Single,System.Boolean)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,System.Single,System.Boolean)
  parent: FriedSynapse.FlowEnt.CommonExtensions
  definition: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,System.Single,System.Boolean)
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_System_Single_System_Boolean_
  name: Tween<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, float, bool)
  nameWithType: CommonExtensions.Tween<EchoMotionProxy<TItem>>(EchoMotionProxy<TItem>, float, bool)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Tween<FriedSynapse.FlowEnt.EchoMotionProxy<TItem>>(FriedSynapse.FlowEnt.EchoMotionProxy<TItem>, float, bool)
  nameWithType.vb: CommonExtensions.Tween(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), Single, Boolean)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Tween(Of FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem))(FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem), Single, Boolean)
  name.vb: Tween(Of EchoMotionProxy(Of TItem))(EchoMotionProxy(Of TItem), Single, Boolean)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},System.Single,System.Boolean)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_System_Single_System_Boolean_
  - name: <
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: '>'
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(FriedSynapse.FlowEnt.EchoMotionProxy{`0},System.Single,System.Boolean)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_System_Single_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
  - name: (
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,FriedSynapse.FlowEnt.EchoOptions)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,FriedSynapse.FlowEnt.EchoOptions)
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_FriedSynapse_FlowEnt_EchoOptions_
  name: Echo<TItem>(TItem, EchoOptions)
  nameWithType: CommonExtensions.Echo<TItem>(TItem, EchoOptions)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Echo<TItem>(TItem, FriedSynapse.FlowEnt.EchoOptions)
  nameWithType.vb: CommonExtensions.Echo(Of TItem)(TItem, EchoOptions)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Echo(Of TItem)(TItem, FriedSynapse.FlowEnt.EchoOptions)
  name.vb: Echo(Of TItem)(TItem, EchoOptions)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,FriedSynapse.FlowEnt.EchoOptions)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_FriedSynapse_FlowEnt_EchoOptions_
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoOptions
    name: EchoOptions
    href: FriedSynapse.FlowEnt.EchoOptions.html
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,FriedSynapse.FlowEnt.EchoOptions)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_FriedSynapse_FlowEnt_EchoOptions_
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoOptions
    name: EchoOptions
    href: FriedSynapse.FlowEnt.EchoOptions.html
  - name: )
- uid: FriedSynapse.FlowEnt.CommonExtensions
  commentId: T:FriedSynapse.FlowEnt.CommonExtensions
  parent: FriedSynapse.FlowEnt
  href: FriedSynapse.FlowEnt.CommonExtensions.html
  name: CommonExtensions
  nameWithType: CommonExtensions
  fullName: FriedSynapse.FlowEnt.CommonExtensions
- uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,System.Nullable{System.Single},System.Boolean)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,System.Nullable{System.Single},System.Boolean)
  isExternal: true
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_System_Nullable_System_Single__System_Boolean_
  name: Echo<TItem>(TItem, float?, bool)
  nameWithType: CommonExtensions.Echo<TItem>(TItem, float?, bool)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Echo<TItem>(TItem, float?, bool)
  nameWithType.vb: CommonExtensions.Echo(Of TItem)(TItem, Single?, Boolean)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Echo(Of TItem)(TItem, Single?, Boolean)
  name.vb: Echo(Of TItem)(TItem, Single?, Boolean)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,System.Nullable{System.Single},System.Boolean)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_System_Nullable_System_Single__System_Boolean_
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Echo``1(``0,System.Nullable{System.Single},System.Boolean)
    name: Echo
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Echo__1___0_System_Nullable_System_Single__System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,FriedSynapse.FlowEnt.TweenOptions)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,FriedSynapse.FlowEnt.TweenOptions)
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_FriedSynapse_FlowEnt_TweenOptions_
  name: Tween<TItem>(TItem, TweenOptions)
  nameWithType: CommonExtensions.Tween<TItem>(TItem, TweenOptions)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Tween<TItem>(TItem, FriedSynapse.FlowEnt.TweenOptions)
  nameWithType.vb: CommonExtensions.Tween(Of TItem)(TItem, TweenOptions)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Tween(Of TItem)(TItem, FriedSynapse.FlowEnt.TweenOptions)
  name.vb: Tween(Of TItem)(TItem, TweenOptions)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,FriedSynapse.FlowEnt.TweenOptions)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_FriedSynapse_FlowEnt_TweenOptions_
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.TweenOptions
    name: TweenOptions
    href: FriedSynapse.FlowEnt.TweenOptions.html
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,FriedSynapse.FlowEnt.TweenOptions)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_FriedSynapse_FlowEnt_TweenOptions_
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: FriedSynapse.FlowEnt.TweenOptions
    name: TweenOptions
    href: FriedSynapse.FlowEnt.TweenOptions.html
  - name: )
- uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,System.Single,System.Boolean)
  commentId: M:FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,System.Single,System.Boolean)
  isExternal: true
  href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_System_Single_System_Boolean_
  name: Tween<TItem>(TItem, float, bool)
  nameWithType: CommonExtensions.Tween<TItem>(TItem, float, bool)
  fullName: FriedSynapse.FlowEnt.CommonExtensions.Tween<TItem>(TItem, float, bool)
  nameWithType.vb: CommonExtensions.Tween(Of TItem)(TItem, Single, Boolean)
  fullName.vb: FriedSynapse.FlowEnt.CommonExtensions.Tween(Of TItem)(TItem, Single, Boolean)
  name.vb: Tween(Of TItem)(TItem, Single, Boolean)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,System.Single,System.Boolean)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_System_Single_System_Boolean_
  - name: <
  - name: TItem
  - name: '>'
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: FriedSynapse.FlowEnt.CommonExtensions.Tween``1(``0,System.Single,System.Boolean)
    name: Tween
    href: FriedSynapse.FlowEnt.CommonExtensions.html#FriedSynapse_FlowEnt_CommonExtensions_Tween__1___0_System_Single_System_Boolean_
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: (
  - name: TItem
  - name: ','
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.#ctor*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.#ctor
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1__ctor_FriedSynapse_FlowEnt_Echo__0_
  name: EchoMotionProxy
  nameWithType: EchoMotionProxy<TItem>.EchoMotionProxy
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.EchoMotionProxy
  nameWithType.vb: EchoMotionProxy(Of TItem).New
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).New
  name.vb: New
- uid: FriedSynapse.FlowEnt.Echo
  commentId: T:FriedSynapse.FlowEnt.Echo
  parent: FriedSynapse.FlowEnt
  href: FriedSynapse.FlowEnt.Echo.html
  name: Echo
  nameWithType: Echo
  fullName: FriedSynapse.FlowEnt.Echo
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Echo*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Echo
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Echo
  name: Echo
  nameWithType: EchoMotionProxy<TItem>.Echo
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Echo
  nameWithType.vb: EchoMotionProxy(Of TItem).Echo
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Echo
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Item*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Item
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Item
  name: Item
  nameWithType: EchoMotionProxy<TItem>.Item
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Item
  nameWithType.vb: EchoMotionProxy(Of TItem).Item
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Item
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.op_Implicit*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.op_Implicit
  name: implicit operator
  nameWithType: EchoMotionProxy<TItem>.implicit operator
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.implicit operator
  nameWithType.vb: EchoMotionProxy(Of TItem).CType
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
  commentId: T:FriedSynapse.FlowEnt.EchoMotionProxy`1
  parent: FriedSynapse.FlowEnt
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  name: EchoMotionProxy<TItem>
  nameWithType: EchoMotionProxy<TItem>
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>
  nameWithType.vb: EchoMotionProxy(Of TItem)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem)
  name.vb: EchoMotionProxy(Of TItem)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Apply
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Apply_FriedSynapse_FlowEnt_Motions_Echo_Abstract_AbstractEchoMotion___
  name: Apply
  nameWithType: EchoMotionProxy<TItem>.Apply
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Apply
  nameWithType.vb: EchoMotionProxy(Of TItem).Apply
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Apply
- uid: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[]
  isExternal: true
  href: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion.html
  name: AbstractEchoMotion[]
  nameWithType: AbstractEchoMotion[]
  fullName: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion[]
  nameWithType.vb: AbstractEchoMotion()
  fullName.vb: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion()
  name.vb: AbstractEchoMotion()
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion
    name: AbstractEchoMotion
    href: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion
    name: AbstractEchoMotion
    href: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion.html
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion}
  commentId: T:System.Collections.Generic.IEnumerable{FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<AbstractEchoMotion>
  nameWithType: IEnumerable<AbstractEchoMotion>
  fullName: System.Collections.Generic.IEnumerable<FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion>
  nameWithType.vb: IEnumerable(Of AbstractEchoMotion)
  fullName.vb: System.Collections.Generic.IEnumerable(Of FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion)
  name.vb: IEnumerable(Of AbstractEchoMotion)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion
    name: AbstractEchoMotion
    href: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion
    name: AbstractEchoMotion
    href: FriedSynapse.FlowEnt.Motions.Echo.Abstract.AbstractEchoMotion.html
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.For*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.For
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_For__1___0_
  name: For
  nameWithType: EchoMotionProxy<TItem>.For
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.For
  nameWithType.vb: EchoMotionProxy(Of TItem).For
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).For
- uid: '{TItem2}'
  commentId: '!:TItem2'
  definition: TItem2
  name: TItem2
  nameWithType: TItem2
  fullName: TItem2
- uid: FriedSynapse.FlowEnt.EchoMotionProxy{{TItem2}}
  commentId: T:FriedSynapse.FlowEnt.EchoMotionProxy{``0}
  parent: FriedSynapse.FlowEnt
  definition: FriedSynapse.FlowEnt.EchoMotionProxy`1
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  name: EchoMotionProxy<TItem2>
  nameWithType: EchoMotionProxy<TItem2>
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem2>
  nameWithType.vb: EchoMotionProxy(Of TItem2)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem2)
  name.vb: EchoMotionProxy(Of TItem2)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem2
  - name: '>'
  spec.vb:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem2
  - name: )
- uid: TItem2
  name: TItem2
  nameWithType: TItem2
  fullName: TItem2
- uid: '{TItem2}[]'
  isExternal: true
  name: TItem2[]
  nameWithType: TItem2[]
  fullName: TItem2[]
  nameWithType.vb: TItem2()
  fullName.vb: TItem2()
  name.vb: TItem2()
  spec.csharp:
  - name: TItem2
  - name: '['
  - name: ']'
  spec.vb:
  - name: TItem2
  - name: (
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxyArray{{TItem2}}
  commentId: T:FriedSynapse.FlowEnt.EchoMotionProxyArray{``0}
  parent: FriedSynapse.FlowEnt
  definition: FriedSynapse.FlowEnt.EchoMotionProxyArray`1
  href: FriedSynapse.FlowEnt.EchoMotionProxyArray-1.html
  name: EchoMotionProxyArray<TItem2>
  nameWithType: EchoMotionProxyArray<TItem2>
  fullName: FriedSynapse.FlowEnt.EchoMotionProxyArray<TItem2>
  nameWithType.vb: EchoMotionProxyArray(Of TItem2)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxyArray(Of TItem2)
  name.vb: EchoMotionProxyArray(Of TItem2)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxyArray`1
    name: EchoMotionProxyArray
    href: FriedSynapse.FlowEnt.EchoMotionProxyArray-1.html
  - name: <
  - name: TItem2
  - name: '>'
  spec.vb:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxyArray`1
    name: EchoMotionProxyArray
    href: FriedSynapse.FlowEnt.EchoMotionProxyArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem2
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxyArray`1
  commentId: T:FriedSynapse.FlowEnt.EchoMotionProxyArray`1
  href: FriedSynapse.FlowEnt.EchoMotionProxyArray-1.html
  name: EchoMotionProxyArray<TItem>
  nameWithType: EchoMotionProxyArray<TItem>
  fullName: FriedSynapse.FlowEnt.EchoMotionProxyArray<TItem>
  nameWithType.vb: EchoMotionProxyArray(Of TItem)
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxyArray(Of TItem)
  name.vb: EchoMotionProxyArray(Of TItem)
  spec.csharp:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxyArray`1
    name: EchoMotionProxyArray
    href: FriedSynapse.FlowEnt.EchoMotionProxyArray-1.html
  - name: <
  - name: TItem
  - name: '>'
  spec.vb:
  - uid: FriedSynapse.FlowEnt.EchoMotionProxyArray`1
    name: EchoMotionProxyArray
    href: FriedSynapse.FlowEnt.EchoMotionProxyArray-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.ForAll*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.ForAll
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_ForAll__1_System_Collections_Generic_IEnumerable___0__
  name: ForAll
  nameWithType: EchoMotionProxy<TItem>.ForAll
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.ForAll
  nameWithType.vb: EchoMotionProxy(Of TItem).ForAll
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).ForAll
- uid: System.Collections.Generic.IEnumerable{{TItem2}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<TItem2>
  nameWithType: IEnumerable<TItem2>
  fullName: System.Collections.Generic.IEnumerable<TItem2>
  nameWithType.vb: IEnumerable(Of TItem2)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TItem2)
  name.vb: IEnumerable(Of TItem2)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: TItem2
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: TItem2
  - name: )
- uid: FriedSynapse.FlowEnt.AnimationException
  commentId: T:FriedSynapse.FlowEnt.AnimationException
  href: FriedSynapse.FlowEnt.AnimationException.html
  name: AnimationException
  nameWithType: AnimationException
  fullName: FriedSynapse.FlowEnt.AnimationException
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Start*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Start
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Start
  name: Start
  nameWithType: EchoMotionProxy<TItem>.Start
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Start
  nameWithType.vb: EchoMotionProxy(Of TItem).Start
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Start
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.StartAsync*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.StartAsync
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_StartAsync_System_Nullable_System_Threading_CancellationToken__
  name: StartAsync
  nameWithType: EchoMotionProxy<TItem>.StartAsync
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.StartAsync
  nameWithType.vb: EchoMotionProxy(Of TItem).StartAsync
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).StartAsync
- uid: System.Nullable{System.Threading.CancellationToken}
  commentId: T:System.Nullable{System.Threading.CancellationToken}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken?
  nameWithType: CancellationToken?
  fullName: System.Threading.CancellationToken?
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  - name: '?'
- uid: System.Threading.Tasks.Task{FriedSynapse.FlowEnt.EchoMotionProxy`1}
  commentId: T:System.Threading.Tasks.Task{FriedSynapse.FlowEnt.EchoMotionProxy`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<EchoMotionProxy<TItem>>
  nameWithType: Task<EchoMotionProxy<TItem>>
  fullName: System.Threading.Tasks.Task<FriedSynapse.FlowEnt.EchoMotionProxy<TItem>>
  nameWithType.vb: Task(Of EchoMotionProxy(Of TItem))
  fullName.vb: System.Threading.Tasks.Task(Of FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem))
  name.vb: Task(Of EchoMotionProxy(Of TItem))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: <
  - name: TItem
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: FriedSynapse.FlowEnt.EchoMotionProxy`1
    name: EchoMotionProxy
    href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TItem
  - name: )
  - name: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Resume*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Resume
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Resume
  name: Resume
  nameWithType: EchoMotionProxy<TItem>.Resume
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Resume
  nameWithType.vb: EchoMotionProxy(Of TItem).Resume
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Resume
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Pause*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Pause
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Pause
  name: Pause
  nameWithType: EchoMotionProxy<TItem>.Pause
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Pause
  nameWithType.vb: EchoMotionProxy(Of TItem).Pause
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Pause
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Stop*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Stop
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Stop_System_Boolean_
  name: Stop
  nameWithType: EchoMotionProxy<TItem>.Stop
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Stop
  nameWithType.vb: EchoMotionProxy(Of TItem).Stop
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Stop
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.Reset*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.Reset
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_Reset
  name: Reset
  nameWithType: EchoMotionProxy<TItem>.Reset
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.Reset
  nameWithType.vb: EchoMotionProxy(Of TItem).Reset
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).Reset
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.AsAsync*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.AsAsync
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_AsAsync
  name: AsAsync
  nameWithType: EchoMotionProxy<TItem>.AsAsync
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.AsAsync
  nameWithType.vb: EchoMotionProxy(Of TItem).AsAsync
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).AsAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarting*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarting
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnStarting_System_Action_
  name: OnStarting
  nameWithType: EchoMotionProxy<TItem>.OnStarting
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnStarting
  nameWithType.vb: EchoMotionProxy(Of TItem).OnStarting
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnStarting
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarted*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnStarted
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnStarted_System_Action_
  name: OnStarted
  nameWithType: EchoMotionProxy<TItem>.OnStarted
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnStarted
  nameWithType.vb: EchoMotionProxy(Of TItem).OnStarted
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnStarted
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdating*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdating
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnUpdating_System_Action_System_Single__
  name: OnUpdating
  nameWithType: EchoMotionProxy<TItem>.OnUpdating
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnUpdating
  nameWithType.vb: EchoMotionProxy(Of TItem).OnUpdating
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnUpdating
- uid: System.Action{System.Single}
  commentId: T:System.Action{System.Single}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<float>
  nameWithType: Action<float>
  fullName: System.Action<float>
  nameWithType.vb: Action(Of Single)
  fullName.vb: System.Action(Of Single)
  name.vb: Action(Of Single)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdated*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnUpdated
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnUpdated_System_Action_System_Single__
  name: OnUpdated
  nameWithType: EchoMotionProxy<TItem>.OnUpdated
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnUpdated
  nameWithType.vb: EchoMotionProxy(Of TItem).OnUpdated
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnUpdated
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopStarted*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopStarted
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnLoopStarted_System_Action_System_Nullable_System_Int32___
  name: OnLoopStarted
  nameWithType: EchoMotionProxy<TItem>.OnLoopStarted
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnLoopStarted
  nameWithType.vb: EchoMotionProxy(Of TItem).OnLoopStarted
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnLoopStarted
- uid: System.Action{System.Nullable{System.Int32}}
  commentId: T:System.Action{System.Nullable{System.Int32}}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<int?>
  nameWithType: Action<int?>
  fullName: System.Action<int?>
  nameWithType.vb: Action(Of Integer?)
  fullName.vb: System.Action(Of Integer?)
  name.vb: Action(Of Integer?)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopCompleted*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnLoopCompleted
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnLoopCompleted_System_Action_System_Nullable_System_Int32___
  name: OnLoopCompleted
  nameWithType: EchoMotionProxy<TItem>.OnLoopCompleted
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnLoopCompleted
  nameWithType.vb: EchoMotionProxy(Of TItem).OnLoopCompleted
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnLoopCompleted
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleting*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleting
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnCompleting_System_Action_
  name: OnCompleting
  nameWithType: EchoMotionProxy<TItem>.OnCompleting
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnCompleting
  nameWithType.vb: EchoMotionProxy(Of TItem).OnCompleting
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnCompleting
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleted*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.OnCompleted
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_OnCompleted_System_Action_
  name: OnCompleted
  nameWithType: EchoMotionProxy<TItem>.OnCompleted
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.OnCompleted
  nameWithType.vb: EchoMotionProxy(Of TItem).OnCompleted
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).OnCompleted
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetName*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetName
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetName_System_String_
  name: SetName
  nameWithType: EchoMotionProxy<TItem>.SetName
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetName
  nameWithType.vb: EchoMotionProxy(Of TItem).SetName
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetUpdateType*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetUpdateType
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetUpdateType_FriedSynapse_FlowEnt_UpdateType_
  name: SetUpdateType
  nameWithType: EchoMotionProxy<TItem>.SetUpdateType
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetUpdateType
  nameWithType.vb: EchoMotionProxy(Of TItem).SetUpdateType
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetUpdateType
- uid: FriedSynapse.FlowEnt.UpdateType
  commentId: T:FriedSynapse.FlowEnt.UpdateType
  parent: FriedSynapse.FlowEnt
  href: FriedSynapse.FlowEnt.UpdateType.html
  name: UpdateType
  nameWithType: UpdateType
  fullName: FriedSynapse.FlowEnt.UpdateType
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetAutoStart*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetAutoStart
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetAutoStart_System_Boolean_
  name: SetAutoStart
  nameWithType: EchoMotionProxy<TItem>.SetAutoStart
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetAutoStart
  nameWithType.vb: EchoMotionProxy(Of TItem).SetAutoStart
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetAutoStart
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetSkipFrames*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetSkipFrames
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetSkipFrames_System_Int32_
  name: SetSkipFrames
  nameWithType: EchoMotionProxy<TItem>.SetSkipFrames
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetSkipFrames
  nameWithType.vb: EchoMotionProxy(Of TItem).SetSkipFrames
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetSkipFrames
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelay*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelay
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetDelay_System_Single_
  name: SetDelay
  nameWithType: EchoMotionProxy<TItem>.SetDelay
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetDelay
  nameWithType.vb: EchoMotionProxy(Of TItem).SetDelay
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetDelay
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelayUntil*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetDelayUntil
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetDelayUntil_System_Func_System_Boolean__
  name: SetDelayUntil
  nameWithType: EchoMotionProxy<TItem>.SetDelayUntil
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetDelayUntil
  nameWithType.vb: EchoMotionProxy(Of TItem).SetDelayUntil
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetDelayUntil
- uid: System.Func{System.Boolean}
  commentId: T:System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<bool>
  nameWithType: Func<bool>
  fullName: System.Func<bool>
  nameWithType.vb: Func(Of Boolean)
  fullName.vb: System.Func(Of Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetLoopCount*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetLoopCount
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetLoopCount_System_Nullable_System_Int32__
  name: SetLoopCount
  nameWithType: EchoMotionProxy<TItem>.SetLoopCount
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetLoopCount
  nameWithType.vb: EchoMotionProxy(Of TItem).SetLoopCount
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetLoopCount
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int?
  nameWithType: int?
  fullName: int?
  nameWithType.vb: Integer?
  fullName.vb: Integer?
  name.vb: Integer?
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '?'
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeScale*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeScale
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetTimeScale_System_Single_
  name: SetTimeScale
  nameWithType: EchoMotionProxy<TItem>.SetTimeScale
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetTimeScale
  nameWithType.vb: EchoMotionProxy(Of TItem).SetTimeScale
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetTimeScale
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeout*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetTimeout
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetTimeout_System_Nullable_System_Single__
  name: SetTimeout
  nameWithType: EchoMotionProxy<TItem>.SetTimeout
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetTimeout
  nameWithType.vb: EchoMotionProxy(Of TItem).SetTimeout
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetTimeout
- uid: System.Nullable{System.Single}
  commentId: T:System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float?
  nameWithType: float?
  fullName: float?
  nameWithType.vb: Single?
  fullName.vb: Single?
  name.vb: Single?
  spec.csharp:
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
  spec.vb:
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: '?'
- uid: FriedSynapse.FlowEnt.EchoMotionProxy`1.SetStopCondition*
  commentId: Overload:FriedSynapse.FlowEnt.EchoMotionProxy`1.SetStopCondition
  href: FriedSynapse.FlowEnt.EchoMotionProxy-1.html#FriedSynapse_FlowEnt_EchoMotionProxy_1_SetStopCondition_System_Func_System_Single_System_Boolean__
  name: SetStopCondition
  nameWithType: EchoMotionProxy<TItem>.SetStopCondition
  fullName: FriedSynapse.FlowEnt.EchoMotionProxy<TItem>.SetStopCondition
  nameWithType.vb: EchoMotionProxy(Of TItem).SetStopCondition
  fullName.vb: FriedSynapse.FlowEnt.EchoMotionProxy(Of TItem).SetStopCondition
- uid: System.Func{System.Single,System.Boolean}
  commentId: T:System.Func{System.Single,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<float, bool>
  nameWithType: Func<float, bool>
  fullName: System.Func<float, bool>
  nameWithType.vb: Func(Of Single, Boolean)
  fullName.vb: System.Func(Of Single, Boolean)
  name.vb: Func(Of Single, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Single
    name: float
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Single
    name: Single
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.single
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
